#BlueJ class context
comment0.target=LinearMeasure
comment0.text=\r\n\ This\ class\ has\ methods\ to\ allow\ a\ user\ to\ perform\ calculations\r\n\ with\ linear\ measurements.\r\n\ \r\n\ Its\ purpose\ is\ to\ illustrate\ object\ references\ as\ both\r\n\ parameters\ and\ return\ values\ in\ methods.\r\n\ \r\n\ @author\ L.\ Lehmann\ \r\n\ @version\ v1\r\n
comment1.params=
comment1.target=LinearMeasure()
comment1.text=\r\n\ The\ default\ constructor\ sets\ all\ the\ measures\ to\ zero.\r\n
comment10.params=other
comment10.target=boolean\ equals(LinearMeasure)
comment10.text=\r\n\ The\ equals(\ )\ method\ determines\ if\ another\ LinearMeasure\r\n\ object\ should\ be\ considered\ eaul\ to\ the\ current\r\n\ object\ based\ on\ the\ value\ of\ the\ totalInces\ fields.\r\n\ @param\ a\ reference\ to\ another\ LinearMeasure\ object\ to\ compare\ with\ the\ \r\n\ current\ LinearMeasure\ object.\r\n\ @return\ a\ boolean\ which\ is\ true\ of\ the\ two\ LineasrMeasure\ have\ the\r\n\ same\ value\ for\ the\ totalInches\ field.\r\n
comment11.params=other
comment11.target=int\ compareTo(LinearMeasure)
comment11.text=\r\n\ The\ compareTo(\ )\ method\ determines\ if\ the\ current\ LinearMeasure\r\n\ object\ should\ be\ considered\ greater\ than,\ equal\ to,\ or\ less\ than\r\n\ another\ LinearMeasure\ object\ based\ on\ the\ values\ \ of\ the\r\n\ totalInches\ field.\r\n\ @param\ a\ reference\ to\ another\ LinearMeasure\ object\r\n\ @return\ an\ int\ which\ is\ positive\ if\ this\ current\ LinearMeasure\r\n\ object\ has\ the\ same\ value\ for\ totalInches\ as\ the\ parameter's\r\n\ totalInches,\ returns\ 0\ if\ the\ two\ LinearMeasure\ objects\ have\r\n\ the\ same\ value\ for\ their\ totalInches\ fields\ and\ returns\ a\ negative\r\n\ integer\ if\ the\ current\ LinearMeasure's\ totalInches\ field\ is\ less\r\n\ than\ the\ value\ of\ the\ parameter's\ totalInches\ field.\r\n\ \r\n
comment2.params=inInches
comment2.target=LinearMeasure(double)
comment2.text=\r\n\ This\ constructor\ allows\ the\ user\ to\ send\ in\ a\ total\ number\ of\ inches.\r\n\ It\ then\ uses\ this\ value\ to\ break\ that\ amount\ up\ into\ feet\ and\ inches.\r\n\ \ @param\ double\ total\ number\ of\ inches\ for\ the\ LinearMeasure\ object\r\n
comment3.params=inFeet\ inInches
comment3.target=LinearMeasure(int,\ double)
comment3.text=\r\n\ This\ constructor\ accepts\ the\ measurement\ broken\ up\ into\ the\ components\ of\r\n\ feet\ and\ inches.\ It\ then\ caluclates\ the\ total\ number\ of\ inches.\r\n\ @param\ int\ the\ number\ of\ integer\ feet\ in\ the\ measure\r\n\ @param\ the\ number\ of\ additional\ inches\ (as\ a\ double)\r\n
comment4.params=lm
comment4.target=LinearMeasure(LinearMeasure)
comment4.text=\r\n\ This\ is\ the\ copy\ constructor.\ It\ is\ used\r\n\ to\ create\ a\ new\ LinearMeasure\ object\ using\ the\ data\r\n\ from\ an\ exisitng\ lInearMeasure\ object.\r\n\ @param\ a\ reference\ to\ an\ exisiting\ LinearMeasure\ Object\r\n
comment5.params=
comment5.target=void\ simplify()
comment6.params=factor
comment6.target=LinearMeasure\ multiply(double)
comment6.text=\r\n\ This\ method\ multiplies\ the\ current\ measure\ by\ a\ factor\ and\ uses\ that\ \r\n\ value\ for\ total\ inches\ to\ create\ a\ new\ LinearMeasure\ object.\ \r\n\ It\ returns\ a\ reference\ to\ the\ new\ LinearMeasure\ object\ created.\r\n\ @param\ a\ double\ used\ as\ the\ multiplication\ factor\r\n\ @return\ a\ reference\ to\ a\ newly\ created\ LinearMeasure\ object\r\n\ \r\n
comment7.params=amount
comment7.target=LinearMeasure\ add(double)
comment8.params=factor
comment8.target=LinearMeasure\ divide(double)
comment8.text=\r\n\ This\ method\ divides\ the\ current\ measure\ by\ a\ factor\ and\ uses\ that\ \r\n\ value\ for\ a\ total\ inches\ amount\ to\ create\ a\ new\ LinearMeasure\ object.\ \r\n\ It\ returns\ a\ reference\ to\ the\ new\ LinearMeasure\ object\ created.\r\n\ @param\ a\ double\ used\ as\ the\ dividend\ \r\n\ @return\ a\ reference\ to\ a\ newly\ created\ LinearMeasure\ object\r\n\ \r\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\ \r\n\ The\ toString\ method\ returns\ a\ textual\ representation\ of\ the\ current\ object.\r\n\ @return\ a\ String\ representing\ the\ state\ of\ the\ LinearMeasure\ object.\r\n
numComments=12

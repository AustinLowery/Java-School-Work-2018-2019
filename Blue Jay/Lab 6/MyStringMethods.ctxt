#BlueJ class context
comment0.target=MyStringMethods
comment0.text=\r\n\ Copies\ 10\ methods\ from\ the\ String\ class\ using\ character\ arrays.\r\n\r\n\ @author\ Austin\ Lowery\r\n\ @version\ 3/3/2019\r\n
comment1.params=
comment1.target=MyStringMethods()
comment1.text=No-args\ constructor\ sets\ original\ string\ to\ a\ blank\ String\ and\ the\ letters\ to\ that\ blank\r\n
comment10.params=start\ end
comment10.target=java.lang.String\ substring(int,\ int)
comment10.text=Takes\ a\ portion\ of\ the\ original\ string\ and\ returns\ it\ based\ on\ the\ parameters.\r\n@param\ start\ the\ portion\ of\ the\ string\ to\ start\ at\r\n@param\ end\ the\ portion\ of\ the\ string\ to\ end\ at\r\n@return\ stringPart\ -\ the\ substring\ returned\r\n
comment11.params=
comment11.target=java.lang.String\ toUpperCase()
comment11.text=Makes\ all\ characters\ in\ a\ string\ uppercase.\r\n@return\ String\ -\ the\ string\ with\ each\ character\ to\ uppercase\r\n
comment12.params=
comment12.target=java.lang.String\ toLowerCase()
comment12.text=Makes\ all\ characters\ in\ a\ string\ lowercase.\r\n@return\ String\ -\ the\ string\ with\ each\ character\ to\ lowercase\r\n
comment13.params=findChar
comment13.target=int\ indexOf(char)
comment13.text=Checks\ the\ first\ instance\ of\ a\ character\ in\ a\ string.\r\n@return\ index\ -\ returns\ where\ the\ last\ instance\ of\ the\ character\ is\ in\ the\ string\r\n
comment14.params=findChar
comment14.target=int\ lastIndexOf(char)
comment14.text=Checks\ the\ last\ instance\ of\ a\ character\ in\ a\ string.\r\n@return\ index\ -\ returns\ where\ the\ last\ instance\ of\ the\ character\ is\ in\ the\ string\r\n
comment2.params=start
comment2.target=MyStringMethods(java.lang.String)
comment2.text=Stores\ the\ parameter\ to\ the\ original\ string\ and\ makes\ the\ letters\ into\ a\ character\ array\ of\ the\ original\ string.\r\n@param\ start\ string\ to\ store\ to\ original\r\n
comment3.params=start
comment3.target=void\ setString(java.lang.String)
comment3.text=Sets\ the\ parameter\ to\ the\ original\ string\ and\ makes\ the\ letters\ into\ a\ character\ array\ of\ the\ original\ string.\r\n@param\ start\ string\ to\ store\ to\ original\r\n
comment4.params=
comment4.target=java.lang.String\ getString()
comment4.text=Gets\ the\ original\ string\ from\ the\ object.\r\n@return\ original\ -\ the\ string\ stored\ in\ the\ object\r\n
comment5.params=index
comment5.target=char\ charAt(int)
comment5.text=Returns\ the\ character\ at\ a\ specific\ index\ from\ within\ a\ String.\ Gives\ a\ blank\ character\ and\ error\ message\ if\ out\ of\ range.\r\n@param\ index\ the\ index\ of\ the\ string's\ character\ location\r\n@return\ result\ -\ the\ character\ at\ the\ index\ or\ the\ lack\ thereof\r\n
comment6.params=other
comment6.target=int\ compareTo(MyStringMethods)
comment6.text=Returns\ a\ negative\ number\ if\ the\ other\ string\ is\ higher,\ a\ zero\ if\ they're\ equal,\ and\ a\ positive\ number\ if\ the\ other\ is\ lower.\ \r\n\ If\ the\ original\ is\ the\ first\ part\ of\ other,\ a\ negative\ is\ returned.\ If\ other\ is\ the\ first\ part\ of\ the\ original,\ a\ positive\ number\ is\ returned.\r\n@param\ other\ a\ MyStringMethods\ object\ to\ compare\ to\ the\ original\ being\ used\r\n@return\ answer\ -\ resulting\ number\ for\ comparing\ the\ two\ strings\r\n
comment7.params=other
comment7.target=int\ compareToIgnoreCase(MyStringMethods)
comment7.text=Returns\ a\ negative\ number\ if\ the\ other\ string\ is\ higher,\ a\ zero\ if\ they're\ equal,\ and\ a\ positive\ number\ if\ the\ other\ is\ lower.\ \r\n\ If\ the\ original\ is\ the\ first\ part\ of\ other,\ a\ negative\ is\ returned.\ If\ other\ is\ the\ first\ part\ of\ the\ original,\ a\ positive\ number\ is\ returned.\ \r\n\ Case\ is\ ignored\ in\ this\ method.\r\n@param\ other\ a\ MyStringMethods\ object\ to\ compare\ to\ the\ original\ being\ used\r\n@return\ answer\ -\ resulting\ number\ for\ comparing\ the\ two\ strings\r\n
comment8.params=other
comment8.target=boolean\ equals(MyStringMethods)
comment8.text=Checks\ if\ two\ strings\ are\ equal\ or\ not.\r\n@param\ other\ a\ MyStringMethods\ object\ to\ compare\ to\ the\ original\ being\ used\r\n@return\ checkEqual\ -\ determines\ if\ the\ two\ strings\ are\ equal\r\n
comment9.params=oldChar\ newChar
comment9.target=java.lang.String\ replace(char,\ char)
comment9.text=Replaces\ a\ specified\ character\ with\ another\ character.\r\n@param\ oldChar\ the\ character\ to\ be\ changed\r\n@param\ newChar\ the\ character\ that\ the\ old\ character\ is\ changed\ to\r\n@return\ String\ -\ a\ string\ with\ the\ old\ character\ replaced\ by\ the\ new\ character\r\n
numComments=15
